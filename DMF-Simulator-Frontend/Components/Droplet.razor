@inject IConfiguration Configuration

<div class="droplet-div" width="@Model.SizeX" height="@Model.SizeY" style="@_divCss">
    <svg class="droplet-svg" width="@Model.SizeX" height="@Model.SizeY">
        <ellipse class="droplet" cx="@_xCenter" cy="@_yCenter" rx="@_xRadius" ry="@_yRadius" style="@_shapeCss" @onmouseover="OnHoverCallback" />
    </svg>
</div>

@code {
    [Parameter]
    public DropletModel Model { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnHoverCallback { get; set; }

    private string _divCss => $"left: {Model.PositionX}px; top: {Model.PositionY}px; visibility: {(Model.Visible ? "visible" : "hidden")}; transition: transform {ElementModel.AnimationSpeed}ms; transform: translate({Model.TranslateX}px, {Model.TranslateY}px) scale({Model.ScaleX}, {Model.ScaleY});";
    private string _shapeCss => $"fill: {Model.Color}; stroke-width: {_strokeWidth}; stroke: {Configuration["dropletStrokeColor"]};";

    private double _xRadius => ((double)Model.SizeX -_strokeWidth) / 2;
    private double _yRadius => ((double)Model.SizeY - _strokeWidth) / 2;

    private double _strokeWidth;

    private double _xCenter => _xRadius + _strokeWidth / 2;
    private double _yCenter => _yRadius + _strokeWidth / 2;

    protected override void OnInitialized()
    {
        double.TryParse(Configuration["dropletStrokeWidth"], out _strokeWidth);
    }
}
