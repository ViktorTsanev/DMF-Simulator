@inject IConfiguration Configuration

<div class="electrode-div" width="@_containerWidth" height="@_containerHeight" style="@_divCss">
    <svg class="electrode-svg" width="@_containerWidth" height="@_containerHeight">
        @if (@Model.Shape == 0)
        {
            <rect class="electrode" width="@Model.SizeX" height="@Model.SizeY" style="@_shapeCss" @onmouseover="OnHoverCallback" />
        }
        else if (@Model.Shape == 1)
        {
            string coords = "";
            @foreach (var corner in @Model.Corners)
            {
                coords += corner.First() + "," + corner.Last() + " ";
            }
            <polygon points="@coords" style="@_shapeCss" />
        }
    </svg>
</div>

@code {
    [Parameter]
    public ElectrodeModel Model { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnHoverCallback { get; set; }

    private string _divCss => $"left: {Model.PositionX}px; top: {Model.PositionY}px; visibility: {(Model.Visible ? "visible" : "hidden")};";
    private string _shapeCss => $"fill: {(Model.Status == 0 ? Configuration["electrodeOffColor"] : Configuration["electrodeOnColor"])}; stroke-width: {_strokeWidth}; stroke: {Configuration["electrodeStrokeColor"]};";

    private double _strokeWidth;
    private double _containerWidth => Model.SizeX + 2 * _strokeWidth;
    private double _containerHeight => Model.SizeY + 2 * _strokeWidth;

    protected override void OnInitialized()
    {
        double.TryParse(Configuration["electrodeStrokeWidth"], out _strokeWidth);
    }
}
