@inject IConfiguration Configuration

<MatButton Icon="@(SimulatorManager.IsPaused ? "play_arrow" : "pause")" Outlined="true" Disabled="!BoardModelNew.Any()" OnClick="ChangeSimulatorState">@SetPlayPauseButtonText()</MatButton>
<MatButton Icon="stop" Outlined="true" Disabled="!SimulatorManager.IsStarted" OnClick="_simulatorManager.StopSimulatorAsync">Stop simulator</MatButton>
<MatButton Icon="clear" Outlined="true" OnClick="SimulatorPage.ResetSimulator">Reset simulator</MatButton>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            <MatPaper Elevation="3" Rounded="true">
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Actuators</span>
                    <MatSlideToggle TValue="bool" Value="IsVisible(_simulatorManager.BoardModel.Actuators)" Disabled="BoardModel.Actuators == null || !BoardModel.Actuators.Any()" ValueChanged="e => ToggleVisibility(e, _simulatorManager.BoardModel.Actuators)" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Bubbles</span>
                    <MatSlideToggle TValue="bool" Value="IsVisible(_simulatorManager.BoardModel.Bubbles)" Disabled="BoardModel.Bubbles == null || !BoardModel.Bubbles.Any()" ValueChanged="e => ToggleVisibility(e, _simulatorManager.BoardModel.Bubbles)" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Droplets</span>
                    <MatSlideToggle TValue="bool" Value="IsVisible(_simulatorManager.BoardModel.Droplets)" Disabled="BoardModel.Droplets == null || !BoardModel.Droplets.Any()" ValueChanged="e => ToggleVisibility(e, _simulatorManager.BoardModel.Droplets)" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Electrodes</span>
                    <MatSlideToggle TValue="bool" Value="IsVisible(_simulatorManager.BoardModel.Electrodes)" Disabled="BoardModel.Electrodes == null || !BoardModel.Electrodes.Any()" ValueChanged="e => ToggleVisibility(e, _simulatorManager.BoardModel.Electrodes)" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Sensors</span>
                    <MatSlideToggle TValue="bool" Value="IsVisible(_simulatorManager.BoardModel.Sensors)" Disabled="BoardModel.Sensors == null || !BoardModel.Sensors.Any()" ValueChanged="@(e => ToggleVisibility(e, _simulatorManager.BoardModel.Sensors))" />
                </div>
            </MatPaper>
            <MatPaper Elevation="3" Rounded="true">
                <ElementInfo Element="@_activeElement" />
            </MatPaper>
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
            <div style="display: flex;">
                <span style="flex-grow: @(_scaleFactor / _sliderMaxValue);">@(_sliderMinValue * 100)%</span>
                <span style="flex-grow: @(1 - _scaleFactor / _sliderMaxValue);">@(Math.Round(_scaleFactor * 100))%</span>
                <span>@(_sliderMaxValue * 100)%</span>
            </div>
            <MatSlider TValue="double" ValueMin="@_sliderMinValue" ValueMax="@_sliderMaxValue" @bind-Value="@_scaleFactor" Immediate="false" Label="Scale Factor"></MatSlider>
            <MatPaper Elevation="0" Style="@_simContainerStyle">
                <div class="simulator-container" width="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeX" height="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeY" style="@_divCss" @onmouseout="() => ActivateElement(null)">
                    @if (_simulatorManager.BoardModel.Electrodes != null)
                    {
                        foreach (var electrode in _simulatorManager.BoardModel.Electrodes)
                        {
                            <Electrode Model="electrode" OnHoverCallback="() => ActivateElement(electrode)" />
                        }
                    }

                    @if (_simulatorManager.BoardModel.Actuators != null)
                    {
                        foreach (var actuator in _simulatorManager.BoardModel.Actuators)
                        {
                            <Actuator Model="actuator" OnHoverCallback="() => ActivateElement(actuator)" />
                        }
                    }

                    @if (_simulatorManager.BoardModel.Sensors != null)
                    {
                        foreach (var sensor in _simulatorManager.BoardModel.Sensors)
                        {
                            <Sensor Model="sensor" OnHoverCallback="() => ActivateElement(sensor)" />
                        }
                    }

                    @if (_simulatorManager.BoardModel.Droplets != null)
                    {
                        foreach (var droplet in _simulatorManager.BoardModel.Droplets)
                        {
                            <Droplet Model="droplet" OnHoverCallback="() => ActivateElement(droplet)" />
                        }
                    }

                    @if (_simulatorManager.BoardModel.Bubbles != null)
                    {
                        foreach (var bubble in _simulatorManager.BoardModel.Bubbles)
                        {
                            <Bubble Model="bubble" OnHoverCallback="() => ActivateElement(bubble)" />
                        }
                    }
                </div>
            </MatPaper>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Simulator SimulatorPage { get; set; }

    [Parameter]
    public BoardModel BoardModel { get; set; }

    [Parameter]
    public List<BoardModel> BoardModelNew { get; set; }

    private SimulatorManager _simulatorManager;
    private BaseElementModel _activeElement;

    private string _divCss => $"transition: transform 1s; transform-origin: left top; transform: scale({_scaleFactor});";

    private int _containerWidth => _simulatorManager.BoardModel.Information.FirstOrDefault().SizeX;
    private int _containerHeight => _simulatorManager.BoardModel.Information.FirstOrDefault().SizeY;
    private string _simContainerStyle => $"width: 100%; height: 100%; overflow: scroll;";

    private double _scaleFactor;
    private double _sliderMinValue;
    private double _sliderMaxValue;

    protected override void OnInitialized()
    {
        if (!double.TryParse(Configuration["sliderMinValue"], out _sliderMinValue))
        {
            _sliderMinValue = 0;
        }

        if (!double.TryParse(Configuration["sliderMaxValue"], out _sliderMaxValue))
        {
            _sliderMaxValue = 5;
        }

        if (!double.TryParse(Configuration["defaultBoardScaleFactor"], out _scaleFactor))
        {
            _scaleFactor = 1;
        }

        int animationSpeed;
        if (int.TryParse(Configuration["animationSpeed"], out animationSpeed))
        {
            SimulatorManager.AnimationSpeed = animationSpeed;
        }

        _simulatorManager = new(BoardModel, BoardModelNew);
        _simulatorManager.SimulatorStateChanged += (o, e) => StateHasChanged();
    }

    private void ToggleVisibility<T>(bool toggled, IList<T> elements) where T : ElementModel
    {
        foreach (ElementModel element in elements)
        {
            element.Visible = toggled;
        }
    }

    private bool IsVisible<T>(IList<T> elements) where T : ElementModel
    {
        if (elements != null)
        {
            return elements.Any(e => e.Visible);
        }
        return false;
    }

    private void ActivateElement(BaseElementModel e)
    {
        _activeElement = e;
    }

    private string SetPlayPauseButtonText()
    {
        if (!SimulatorManager.IsStarted)
        {
            return "Start simulator";
        }
        else if (SimulatorManager.IsPaused)
        {
            return "Resume simulator";
        }
        else
        {
            return "Pause simulator";
        }
    }

    private async Task ChangeSimulatorState()
    {
        if (SimulatorManager.IsPaused)
        {
            await _simulatorManager.StartSimulatorAsync();
        }
        else
        {
            SimulatorManager.PauseSimulator();
        }
    }
}
