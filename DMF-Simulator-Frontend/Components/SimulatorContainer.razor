@inject IConfiguration Configuration

<MatButton Icon="@(_simulatorManager.IsRunning ? "pause" : "play_arrow")" Unelevated="true" Disabled="@(!BoardModelNew.Any())" OnClick="_simulatorManager.StartSimulatorAsync">@(_simulatorManager.IsRunning ? "Pause simulator" : "Start simulator")</MatButton>
<MatButton Icon="stop" Unelevated="true" OnClick="SimulatorPage.ResetSimulator">Reset simulator</MatButton>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            <MatPaper Elevation="3" Rounded="true">
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Actuators</span>
                    <MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Actuators)" Disabled="@(BoardModel.Actuators == null)" ValueChanged="@(e=>ToggleVisibility(e, _simulatorManager.BoardModel.Actuators))" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Bubbles</span>
                    <MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Bubbles)" Disabled="@(BoardModel.Bubbles == null)" ValueChanged="@(e=>ToggleVisibility(e, _simulatorManager.BoardModel.Bubbles))" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Droplets</span>
                    <MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Droplets)" Disabled="@(BoardModel.Droplets == null)" ValueChanged="@(e=>ToggleVisibility(e, _simulatorManager.BoardModel.Droplets))" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Electrodes</span>
                    <MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Electrodes)" Disabled="@(BoardModel.Electrodes == null)" ValueChanged="@(e=>ToggleVisibility(e, _simulatorManager.BoardModel.Electrodes))" />
                </div>
                <div style="padding: 5px; box-sizing: border-box; display: flex; flex-wrap: wrap;">
                    <span style="flex-grow: 1;">Sensors</span>
                    <MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Sensors)" Disabled="@(BoardModel.Sensors == null)" ValueChanged="@(e=>ToggleVisibility(e, _simulatorManager.BoardModel.Sensors))" />
                </div>
            </MatPaper>
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
            <MatPaper Elevation="3" Rounded="true">
                <ElementInfo Element="@_activeElement" />
            </MatPaper>
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
            <MatSlider TValue="double" ValueMin="@_sliderMinValue" ValueMax="@_sliderMaxValue" @bind-Value="@_scaleFactor" Immediate="false" Label="Scale Factor"></MatSlider>
            <div class="simulator-container" width="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeX" height="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeY" style="@_divCss">
                @if (_simulatorManager.BoardModel.Electrodes != null)
                {
                    @foreach (var electrode in _simulatorManager.BoardModel.Electrodes)
                    {
                        <Electrode Model="electrode" OnHoverCallback="@(() => ActivateElement(electrode))" />
                    }
                }

                @if (_simulatorManager.BoardModel.Actuators != null)
                {
                    @foreach (var actuator in _simulatorManager.BoardModel.Actuators)
                    {
                        <Actuator Model="actuator" OnHoverCallback="@(() => ActivateElement(actuator))" />
                    }
                }

                @if (_simulatorManager.BoardModel.Sensors != null)
                {
                    @foreach (var sensor in _simulatorManager.BoardModel.Sensors)
                    {
                        <Sensor Model="sensor" OnHoverCallback="@(() => ActivateElement(sensor))" />
                    }
                }

                @if (_simulatorManager.BoardModel.Droplets != null)
                {
                    @foreach (var droplet in _simulatorManager.BoardModel.Droplets)
                    {
                        <Droplet Model="droplet" OnHoverCallback="@(() => ActivateElement(droplet))" />
                    }
                }

                @if (_simulatorManager.BoardModel.Bubbles != null)
                {
                    @foreach (var bubble in _simulatorManager.BoardModel.Bubbles)
                    {
                        <Bubble Model="bubble" OnHoverCallback="@(() => ActivateElement(bubble))" />
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private SimulatorManager _simulatorManager;
    private BaseElementModel _activeElement;

    [CascadingParameter]
    public Simulator SimulatorPage { get; set; }

    [Parameter]
    public BoardModel BoardModel { get; set; }

    [Parameter]
    public List<BoardModel> BoardModelNew { get; set; }

    private string _divCss => $"transition: transform 1s; transform: scale({_scaleFactor});";
    private double _scaleFactor;
    private double _sliderMinValue;
    private double _sliderMaxValue;

    protected override void OnInitialized()
    {
        if (!double.TryParse(Configuration["sliderMinValue"], out _sliderMinValue))
        {
            _sliderMinValue = 0;
        }

        if (!double.TryParse(Configuration["sliderMaxValue"], out _sliderMaxValue))
        {
            _sliderMaxValue = 5;
        }

        if (!double.TryParse(Configuration["defaultBoardScaleFactor"], out _scaleFactor))
        {
            _scaleFactor = 1;
        }

        _simulatorManager = new(BoardModel, BoardModelNew);
        _simulatorManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    private void ToggleVisibility<T>(bool toggled, IList<T> elements) where T : ElementModel
    {
        foreach (ElementModel element in elements)
        {
            element.Visible = toggled;
        }
    }

    private bool IsVisible<T>(IList<T> elements) where T : ElementModel
    {
        if (elements != null)
        {
            return elements.Any(e => e.Visible);
        }
        return false;
    }

    private void ActivateElement(BaseElementModel e)
    {
        _activeElement = e;
    }
}
