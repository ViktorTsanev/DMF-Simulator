@inject IConfiguration Configuration

<MatTooltip Tooltip="@(_running ? "Pause simulator" : "Start simulator")">
    <MatIconButton RefBack="@context" Icon="play_circle_outline" ToggleIcon="pause_circle_outline" Disabled="@(!BoardModelNew.Any())" @bind-Toggled="@_running" OnClick="_simulatorManager.StartSimulatorAsync" />
</MatTooltip>

<MatSlider TValue="double" ValueMin="@_sliderMinValue" ValueMax="@_sliderMaxValue" @bind-Value="@_scaleFactor" Immediate="false" Label="Scale Factor"></MatSlider>

<div class="simulator-container" width="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeX" height="@_simulatorManager.BoardModel.Information.FirstOrDefault().SizeY" style="@_divCss">
    @if (_simulatorManager.BoardModel.Electrodes != null)
    {
        @foreach (var electrode in _simulatorManager.BoardModel.Electrodes)
        {
            <Electrode Model="electrode" OnHoverCallback="@(() => ActivateElement(electrode))" />
        }
    }

    @if (_simulatorManager.BoardModel.Actuators != null)
    {
        @foreach (var actuator in _simulatorManager.BoardModel.Actuators)
        {
            <Actuator Model="actuator" OnHoverCallback="@(() => ActivateElement(actuator))" />
        }
    }

    @if (_simulatorManager.BoardModel.Sensors != null)
    {
        @foreach (var sensor in _simulatorManager.BoardModel.Sensors)
        {
            <Sensor Model="sensor" OnHoverCallback="@(() => ActivateElement(sensor))" />
        }
    }

    @if (_simulatorManager.BoardModel.Droplets != null)
    {
        @foreach (var droplet in _simulatorManager.BoardModel.Droplets)
        {
            <Droplet Model="droplet" OnHoverCallback="@(() => ActivateElement(droplet))" />
        }
    }

    @if (_simulatorManager.BoardModel.Bubbles != null)
    {
        @foreach (var bubble in _simulatorManager.BoardModel.Bubbles)
        {
            <Bubble Model="bubble" OnHoverCallback="@(() => ActivateElement(bubble))" />
        }
    }
</div>

<MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Actuators)" Label="Actuators" Disabled="@(BoardModel.Actuators == null)" ValueChanged="@(e=>Toggle(e, _simulatorManager.BoardModel.Actuators))"></MatSlideToggle>
<MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Bubbles)" Label="Bubbles" Disabled="@(BoardModel.Bubbles == null)" ValueChanged="@(e=>Toggle(e, _simulatorManager.BoardModel.Bubbles))"></MatSlideToggle>
<MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Droplets)" Label="Droplets" Disabled="@(BoardModel.Droplets == null)" ValueChanged="@(e=>Toggle(e, _simulatorManager.BoardModel.Droplets))"></MatSlideToggle>
<MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Electrodes)" Label="Electrodes" Disabled="@(BoardModel.Electrodes == null)" ValueChanged="@(e=>Toggle(e, _simulatorManager.BoardModel.Electrodes))"></MatSlideToggle>
<MatSlideToggle TValue="bool" Value="@IsVisible(_simulatorManager.BoardModel.Sensors)" Label="Sensors" Disabled="@(BoardModel.Sensors == null)" ValueChanged="@(e=>Toggle(e, _simulatorManager.BoardModel.Sensors))"></MatSlideToggle>

<MatPaper Elevation="3">
    <ElementInfo Element="@_activeElement" />
</MatPaper>

@code {
    private SimulatorManager _simulatorManager;
    private BaseElementModel _activeElement;
    private bool _running;

    [Parameter]
    public BoardModel BoardModel { get; set; }

    [Parameter]
    public List<BoardModel> BoardModelNew { get; set; }

    private string _divCss => $"transition: transform 1s; transform: scale({_scaleFactor});";
    private double _scaleFactor;
    private double _sliderMinValue;
    private double _sliderMaxValue;

    protected override void OnInitialized()
    {
        if (!double.TryParse(Configuration["sliderMinValue"], out _sliderMinValue))
        {
            _sliderMinValue = 0;
        }

        if (!double.TryParse(Configuration["sliderMaxValue"], out _sliderMaxValue))
        {
            _sliderMaxValue = 5;
        }

        if (!double.TryParse(Configuration["defaultBoardScaleFactor"], out _scaleFactor))
        {
            _scaleFactor = 1;
        }

        _simulatorManager = new(BoardModel, BoardModelNew);
        _simulatorManager.MainLoopCompleted += (o, e) => StateHasChanged();
    }

    private void Toggle<T>(bool toggled, IList<T> elements) where T : ElementModel
    {
        foreach (ElementModel element in elements)
        {
            element.Visible = toggled;
        }
    }

    private bool IsVisible<T>(IList<T> elements) where T : ElementModel
    {
        if (elements != null)
        {
            return elements.Any(e => e.Visible);
        }
        return false;
    }

    private void ActivateElement(BaseElementModel e)
    {
        _activeElement = e;
    }
}
