@page "/simulator"
@inject HttpClient Http
@inject IMatToaster Toaster
@using System.IO
@using Newtonsoft.Json

@if (boardModel == null)
{
    <MatFileUpload OnChange="MultipleFilesReady" AllowMultiple="true" Label="Upload files"></MatFileUpload>
    <!--<MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />-->
}
else
{
    <CascadingValue Value="this" IsFixed="true">
        <SimulatorContainer BoardModel="@boardModel" BoardModelNew="@boardModelNew" />
    </CascadingValue>
}

@code {
    private BoardModel boardModel;
    private List<BoardModel> boardModelNew;

    protected override async Task OnInitializedAsync()
    {
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/board4x3.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/board10x10.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/boardWithEverything.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/100x100.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/32x20.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/32x20_mini.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/0.json");
        //boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/board10x10F.json");
        boardModel = await Http.GetFromJsonAsync<BoardModel>("sample-data/board32x20(2).json");
        //boardModel = new();
        boardModelNew = new();
        //boardModelNew.Add(await Http.GetFromJsonAsync<BoardModel>("sample-data/changes1.json"));
        //boardModelNew.Add(await Http.GetFromJsonAsync<BoardModel>("sample-data/changes2.json"));
        //boardModelNew.Add(await Http.GetFromJsonAsync<BoardModel>("sample-data/changes3.json"));
    }

    public async Task MultipleFilesReady(IMatFileUploadEntry[] files)
    {
        try
        {
            //boardModel = new();
            boardModelNew = new();
            foreach (var file in files)
            {
                using MemoryStream memoryStream = new();
                await file.WriteToStreamAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);
                using StreamReader reader = new(memoryStream);
                string fileContent = await reader.ReadToEndAsync();

                if (file.Name == "0.json")
                {
                    boardModel = JsonConvert.DeserializeObject<BoardModel>(fileContent);
                }
                else
                {
                    boardModelNew.Add(JsonConvert.DeserializeObject<BoardModel>(fileContent));
                }
            }

            if (files.Length > 0)
            {
                Toaster.Add("Successfully Uploaded Files", MatToastType.Success, "Success", "");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Toaster.Add("Error Upoading Files", MatToastType.Danger, "Error", "");
        }
    }

    public void ResetSimulator()
    {
        boardModel = null;
        boardModelNew = null;
    }
}
